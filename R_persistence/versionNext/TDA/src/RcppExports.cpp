// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// GridDiag
void GridDiag(Rcpp::NumericVector FUNvaluesInput, int gridDimensionInput, Rcpp::IntegerVector gridNumberInput, int maxdimensionInput, std::string decompositionInput, std::string libraryInput, int locationInput, int printInput);
RcppExport SEXP TDA_GridDiag(SEXP FUNvaluesInputSEXP, SEXP gridDimensionInputSEXP, SEXP gridNumberInputSEXP, SEXP maxdimensionInputSEXP, SEXP decompositionInputSEXP, SEXP libraryInputSEXP, SEXP locationInputSEXP, SEXP printInputSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type FUNvaluesInput(FUNvaluesInputSEXP );
        Rcpp::traits::input_parameter< int >::type gridDimensionInput(gridDimensionInputSEXP );
        Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type gridNumberInput(gridNumberInputSEXP );
        Rcpp::traits::input_parameter< int >::type maxdimensionInput(maxdimensionInputSEXP );
        Rcpp::traits::input_parameter< std::string >::type decompositionInput(decompositionInputSEXP );
        Rcpp::traits::input_parameter< std::string >::type libraryInput(libraryInputSEXP );
        Rcpp::traits::input_parameter< int >::type locationInput(locationInputSEXP );
        Rcpp::traits::input_parameter< int >::type printInput(printInputSEXP );
        GridDiag(FUNvaluesInput, gridDimensionInput, gridNumberInput, maxdimensionInput, decompositionInput, libraryInput, locationInput, printInput);
    }
    return R_NilValue;
END_RCPP
}
// Bottleneck
double Bottleneck(Rcpp::NumericVector points1Input, int points1NumberInput, Rcpp::NumericVector points2Input, int points2NumberInput);
RcppExport SEXP TDA_Bottleneck(SEXP points1InputSEXP, SEXP points1NumberInputSEXP, SEXP points2InputSEXP, SEXP points2NumberInputSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type points1Input(points1InputSEXP );
        Rcpp::traits::input_parameter< int >::type points1NumberInput(points1NumberInputSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type points2Input(points2InputSEXP );
        Rcpp::traits::input_parameter< int >::type points2NumberInput(points2NumberInputSEXP );
        double __result = Bottleneck(points1Input, points1NumberInput, points2Input, points2NumberInput);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Wasserstein
double Wasserstein(Rcpp::NumericVector points1Input, int points1NumberInput, Rcpp::NumericVector points2Input, int points2NumberInput, int inputP);
RcppExport SEXP TDA_Wasserstein(SEXP points1InputSEXP, SEXP points1NumberInputSEXP, SEXP points2InputSEXP, SEXP points2NumberInputSEXP, SEXP inputPSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type points1Input(points1InputSEXP );
        Rcpp::traits::input_parameter< int >::type points1NumberInput(points1NumberInputSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type points2Input(points2InputSEXP );
        Rcpp::traits::input_parameter< int >::type points2NumberInput(points2NumberInputSEXP );
        Rcpp::traits::input_parameter< int >::type inputP(inputPSEXP );
        double __result = Wasserstein(points1Input, points1NumberInput, points2Input, points2NumberInput, inputP);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
